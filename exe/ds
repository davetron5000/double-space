#!/usr/bin/env ruby

require "optparse"
require "methadone"
require "json"
require "fileutils"
require "pathname"
require "double/space.rb"

class App
  include Methadone::Main
  include Methadone::CLILogging

  def self.split_array(array, string)
    resulting_arrays = []
    current_array = []
    array.each do |element|
      if element == string
        resulting_arrays << current_array
        current_array = []
      else
        current_array << element
      end
    end
    if current_array != []
      resulting_arrays << current_array
    end
    resulting_arrays
  end


  main do
    if File.exist?("story.json")
      if options["act"] && options["scene"]
        act   = options["act"].to_i
        scene = options["scene"].to_i

        template_dir = Pathname(__FILE__).dirname / ".." / "templates"
        act_dir = "act#{act}"
        scene_file = Pathname(act_dir) / "scene#{scene}.md"

        if scene_file.exist?
          exit_now! "#{scene_file} already exists. Not overwriting"
        end

        FileUtils.mkdir_p act_dir
        FileUtils.cp template_dir / "scene.md", scene_file
      elsif options["act"] || options["scene"]
        exit_now! "You must specify both --act and --scene or neither"
      else
        clean = options["clean"]

        json_contents = JSON.parse(File.read("story.json"))
        title = json_contents["story"]["story-info"]["title"]
        File.open("story.html","w") do |file|
          file.puts "<h1>#{ title }</h1>"

          acts = Dir["act*"].select { |dir|
            Pathname(dir).directory? && dir =~ /act\d+$/
          }.sort { |a,b|
            num_a = a.gsub(/act/,"").to_i
            num_b = b.gsub(/act/,"").to_i
            num_a <=> num_b
          }.each do |dir|
            act_num = dir.gsub(/act/,"").to_i
            Dir["#{dir}/scene*.md"].select { |file|
              Pathname(file).file? && file =~ /scene\d+\.md/
            }.sort { |a,b|
              num_a = a.gsub(/act\d+\/scene/,"").gsub(/\.md/,"").to_i
              num_b = b.gsub(/act\d+\/scene/,"").gsub(/\.md/,"").to_i
              num_a <=> num_b
            }.each do |scene_filename|
              scene_num = scene_filename.gsub(/act\d+\/scene/,"").gsub(/\.md/,"").to_i

              unless clean
                file.puts "<h2>Act #{act_num}</h2>"
                file.puts "<h3>Scene #{scene_num}</h3>"
              end
              contents = File.read(scene_filename).split(/\n/)
              q_and_a, content, notes = split_array(contents, "%%%%")
              paragraphs = split_array(content,"")

              unless clean
                file.puts "<ul>"
                q_and_a.each do |qa|
                  question,answer = qa.split(/\?/).map(&:strip)
                  file.puts "<li><strong>#{question}?</strong> #{answer}</li>"
                end
                file.puts "<ul>"
              end

              paragraphs.each do |paragraph|
                file.puts "<p>#{paragraph.map(&:strip).join(" ")}</p>"
              end

              unless clean
                file.puts "<ul>"
                notes.map(&:strip).each do |note|
                  file.puts "<li>#{note}</li>"
                end
                file.puts "</ul>"
              end
            end
          end
        end
      end
    else
      puts "Initializing project..."

      initial_config = {
        "story" => {
          "contact-info" => {
            "name"         => "«name for contact/payment»",
            "address"      => "«address for contact/payment»",
            "phone-number" => "«phone number for contact/payment»",
            "email"        => "«email for contact/payment»",
          },
          "story-info" => {
            "title"    => "«title of your story»",
            "author"   => "«author of your story»",
            "keywords" => "«a scant few keywords for the header pages in the manuscript»",
          }
        }
      }
      File.open("story.json", "w") do |file|
        file.puts initial_config.to_json
      end

      template_dir = Pathname(__FILE__).dirname / ".." / "templates"
      FileUtils.mkdir "act1"
      FileUtils.cp template_dir / "scene.md", "act1/scene1.md"

      puts "New project setup.  Get writing!"
      puts "Re-run `ds` to generate your story"
    end
  end

  on("--[no-]clean", "Produce a clean HTML version with no notes or metadata")
  on("--manuscript", "Produce a .docx file that contains a hopefully properly formatted manuscript you can submit")
  on("--real-italics", "Use real italics in the manuscript and not underlines")
  on("-a ACT", "--act", "Create a new empty scene in act ACT", /^\d+$/)
  on("-s SCENE", "--scene", "Create a new empty scene in act ACT", /^\d+$/)

  version Double::Space::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  description "Write and submit your amazing short story"

  go!
end
